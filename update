#!/bin/bash

source config.ini

## clear MAD update_log and execute job
cp ATVdetails.json $MAD_path_1/personal_commands/
curl -u $MADmin_username_1:$MADmin_password_1 "$MAD_url_1/delete_log"
curl -u $MADmin_username_1:$MADmin_password_1 "$MAD_url_1/reload_jobs"
curl -u $MADmin_username_1:$MADmin_password_1 "$MAD_url_1/install_file_all_devices?jobname=ATVdetails&type=jobType.CHAIN"

if [ -z "$MAD_path_2" ]; then
echo "No second instance defined"
else
cp ATVdetails.json $MAD_path_2/personal_commands/
curl -u $MADmin_username_2:$MADmin_password_2 "$MAD_url_2/delete_log"
curl -u $MADmin_username_2:$MADmin_password_2 "$MAD_url_2/reload_jobs"
curl -u $MADmin_username_2:$MADmin_password_2 "$MAD_url_2/install_file_all_devices?jobname=ATVdetails&type=jobType.CHAIN"
fi

## wait time for jobs to finish
sleep $wait

## Check Columns
mysql $ATVdetails_db -u$DB_user -p$DB_pass -h$DB_IP < table_update.sql

## Insert Origins into table
mysql $ATVdetails_db -u$DB_user -p$DB_pass -h$DB_IP -N -e "insert ignore into ATVdetails (date,origin) select curdate(), name from $MAD_db.settings_device;"

## update db for instance 1
if [ -z "$MAD_path_1" ]; then
        echo "No instance defined"
else
        mysql $ATVdetails_db -u$DB_user -p$DB_pass -h$DB_IP -N -e "insert ignore into ATVdetails (date,origin) select curdate(), name from $MAD_db.settings_device;"

        query(){
        mysql  -u$DB_user -p$DB_pass -NB -h$DB_IP $ATVdetails_db -e "$1;"
        }
        while read -r origin _ ;do
        rgc=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=RGC ).*?(?= \|)')
        pogodroid=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=PD ).*?(?= \|)')
        pogo=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=PoGo ).*?(?= \|)')
        rom=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=ROM ).*?(?= \|)')
        pogo_update=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=PoGo_Autoupdate ).*?(?= \|)')
        rgc_update=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=RGC_Autoupdate ).*?(?= \|)')
        pd_update=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=PD_Autoupdate ).*?(?= \|)')
        pingreboot=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=Pingreboot ).*?(?= \|)')
        temperature=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=Temperature ).*?(?= \|)')
        Magisk=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=Magisk ).*?(?= )')
        Modules=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=Modules ).*?(?= \|)')
        IP=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=IP ).*?(?=\])')
        Gmail=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=Gmail ).*?(?= \|)')
        PD_auth_username=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=PD_auth_username ).*?(?= \|)')
        PD_auth_password=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=PD_auth_password ).*?(?= \|)')
        PD_user_login=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=PD_user_login ).*?(?= \|)')
        PD_auth_id=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=PD_auth_id ).*?(?= \|)')
        PD_auth_token=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=PD_auth_token ).*?(?= \|)')
        PD_post_destination=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=PD_post_destination ).*?(?= \|)' | sed 's/, //')
        PD_boot_delay=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=PD_boot_delay ).*?(?= \|)')
        PD_injection_delay=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=PD_injection_delay ).*?(?= \|)')
        RGC_auth_username=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=RGC_auth_username ).*?(?= \|)')
        RGC_auth_password=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=RGC_auth_password ).*?(?= \|)')
        RGC_websocket_uri=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=RGC_websocket_uri ).*?(?= \|)')
        RGC_boot_delay=$(grep -w name$origin $MAD_path_1/update_log.json| grep -o -P '(?<=RGC_boot_delay ).*?(?= \|)')

        if [ "$rgc" != '' ]; then
                mysql $ATVdetails_db -u$DB_user -p$DB_pass -h$DB_IP -N -e "UPDATE ATVdetails set rgc = '$rgc', pogodroid = '$pogodroid', pogo = '$pogo', rom = '$rom', magisk = '$Magisk', pogo_update = '$pogo_update', rgc_update = '$rgc_update', pd_update = '$pd_update', pingreboot = '$pingreboot', temperature = '$temperature', magisk_modules = '$Modules', ip = '$IP', gmail = '$Gmail', PD_auth_username = '$PD_auth_username', PD_auth_password = '$PD_auth_password', PD_user_login = 'PD_user_login', PD_auth_id = '$PD_auth_id', PD_auth_token = '$PD_auth_token', PD_post_destination = '$PD_post_destination', PD_boot_delay = '$PD_boot_delay', PD_injection_delay = '$PD_injection_delay', RGC_auth_username = '$RGC_auth_username', RGC_auth_password = '$RGC_auth_password', RGC_websocket_uri = '$RGC_websocket_uri', RGC_boot_delay = '$RGC_boot_delay' WHERE origin = '$origin' and date = curdate();"
        fi
        done < <(query "select origin FROM ATVdetails;")
fi


## update db for instance 2
if [ -z "$MAD_path_2" ]; then
        echo "No 2nd instance defined"
else
        mysql $ATVdetails_db -u$DB_user -p$DB_pass -h$DB_IP -N -e "insert ignore into ATVdetails (date,origin) select curdate(), name from $MAD_db.settings_device;"

        query(){
        mysql  -u$DB_user -p$DB_pass -NB -h$DB_IP  $ATVdetails_db -e "$1;"
        }
        while read -r origin _ ;do
        rgc=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=RGC ).*?(?= \|)')
        pogodroid=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=PD ).*?(?= \|)')
        pogo=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=PoGo ).*?(?= \|)')
        rom=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=ROM ).*?(?= \|)')
        pogo_update=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=PoGo_Autoupdate ).*?(?= \|)')
        rgc_update=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=RGC_Autoupdate ).*?(?= \|)')
        pd_update=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=PD_Autoupdate ).*?(?= \|)')
        pingreboot=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=Pingreboot ).*?(?= \|)')
        temperature=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=Temperature ).*?(?= \|)')
        Magisk=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=Magisk ).*?(?= )')
        Modules=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=Modules ).*?(?= \|)')
        IP=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=IP ).*?(?=\])')
        Gmail=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=Gmail ).*?(?= \|)')
        PD_auth_username=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=PD_auth_username ).*?(?= \|)')
        PD_auth_password=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=PD_auth_password ).*?(?= \|)')
        PD_user_login=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=PD_user_login ).*?(?= \|)')
        PD_auth_id=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=PD_auth_id ).*?(?= \|)')
        PD_auth_token=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=PD_auth_token ).*?(?= \|)')
        PD_post_destination=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=PD_post_destination ).*?(?= \|)' | sed 's/, //')
        PD_boot_delay=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=PD_boot_delay ).*?(?= \|)')
        PD_injection_delay=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=PD_injection_delay ).*?(?= \|)')
        RGC_auth_username=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=RGC_auth_username ).*?(?= \|)')
        RGC_auth_password=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=RGC_auth_password ).*?(?= \|)')
        RGC_websocket_uri=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=RGC_websocket_uri ).*?(?= \|)')
        RGC_boot_delay=$(grep -w name$origin $MAD_path_2/update_log.json| grep -o -P '(?<=RGC_boot_delay ).*?(?= \|)')
                if [ "$rgc" != '' ]; then
                        mysql $ATVdetails_db -u$DB_user -p$DB_pass -h$DB_IP -N -e "UPDATE ATVdetails set rgc = '$rgc', pogodroid = '$pogodroid', pogo = '$pogo', rom = '$rom', magisk = '$Magisk', pogo_update = '$pogo_update', rgc_update = '$rgc_update', pd_update = '$pd_update', pingreboot = '$pingreboot', temperature = '$temperature', magisk_modules = '$Modules', ip = '$IP', gmail = '$Gmail', PD_auth_username = '$PD_auth_username', PD_auth_password = '$PD_auth_password', PD_user_login = 'PD_user_login', PD_auth_id = '$PD_auth_id', PD_auth_token = '$PD_auth_token', PD_post_destination = '$PD_post_destination', PD_boot_delay = '$PD_boot_delay', PD_injection_delay = '$PD_injection_delay', RGC_auth_username = '$RGC_auth_username', RGC_auth_password = '$RGC_auth_password', RGC_websocket_uri = '$RGC_websocket_uri', RGC_boot_delay = '$RGC_boot_delay' WHERE origin = '$origin' and date = curdate();"
                fi
        done < <(query "select origin FROM ATVdetails;")
fi
